{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c82d1f2f",
   "metadata": {
    "papermill": {
     "duration": 0.012136,
     "end_time": "2024-06-09T18:33:47.737718",
     "exception": false,
     "start_time": "2024-06-09T18:33:47.725582",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Predicting Win Chance in League of Legends\n",
    "This notebook is designed to predict the win probability of a team in a League of Legends match using a dataset of past games. It employs a Random Forest Classifier for prediction. Below is a step-by-step walkthrough of the notebook's content and operations:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c15d1b57",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:47.764998Z",
     "iopub.status.busy": "2024-06-09T18:33:47.764480Z",
     "iopub.status.idle": "2024-06-09T18:33:48.890940Z",
     "shell.execute_reply": "2024-06-09T18:33:48.889038Z"
    },
    "papermill": {
     "duration": 1.144574,
     "end_time": "2024-06-09T18:33:48.894737",
     "exception": false,
     "start_time": "2024-06-09T18:33:47.750163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/league-of-legends/champion_info_2.json\n",
      "/kaggle/input/league-of-legends/games.csv\n",
      "/kaggle/input/league-of-legends/summoner_spell_info.json\n",
      "/kaggle/input/league-of-legends/champion_info.json\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "394f8124",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:48.920542Z",
     "iopub.status.busy": "2024-06-09T18:33:48.919971Z",
     "iopub.status.idle": "2024-06-09T18:33:48.925754Z",
     "shell.execute_reply": "2024-06-09T18:33:48.924221Z"
    },
    "papermill": {
     "duration": 0.022373,
     "end_time": "2024-06-09T18:33:48.928868",
     "exception": false,
     "start_time": "2024-06-09T18:33:48.906495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ca008a42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:48.956472Z",
     "iopub.status.busy": "2024-06-09T18:33:48.956074Z",
     "iopub.status.idle": "2024-06-09T18:33:49.520228Z",
     "shell.execute_reply": "2024-06-09T18:33:49.519154Z"
    },
    "papermill": {
     "duration": 0.581482,
     "end_time": "2024-06-09T18:33:49.523128",
     "exception": false,
     "start_time": "2024-06-09T18:33:48.941646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/league-of-legends/games.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f11414d",
   "metadata": {
    "papermill": {
     "duration": 0.012382,
     "end_time": "2024-06-09T18:33:49.547512",
     "exception": false,
     "start_time": "2024-06-09T18:33:49.535130",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Exploration\n",
    "The dataset is first examined to understand its structure and the columns it contains."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "167c468b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:49.574083Z",
     "iopub.status.busy": "2024-06-09T18:33:49.573572Z",
     "iopub.status.idle": "2024-06-09T18:33:49.620112Z",
     "shell.execute_reply": "2024-06-09T18:33:49.618558Z"
    },
    "papermill": {
     "duration": 0.062955,
     "end_time": "2024-06-09T18:33:49.622894",
     "exception": false,
     "start_time": "2024-06-09T18:33:49.559939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gameId</th>\n",
       "      <th>creationTime</th>\n",
       "      <th>gameDuration</th>\n",
       "      <th>seasonId</th>\n",
       "      <th>winner</th>\n",
       "      <th>firstBlood</th>\n",
       "      <th>firstTower</th>\n",
       "      <th>firstInhibitor</th>\n",
       "      <th>firstBaron</th>\n",
       "      <th>firstDragon</th>\n",
       "      <th>...</th>\n",
       "      <th>t2_towerKills</th>\n",
       "      <th>t2_inhibitorKills</th>\n",
       "      <th>t2_baronKills</th>\n",
       "      <th>t2_dragonKills</th>\n",
       "      <th>t2_riftHeraldKills</th>\n",
       "      <th>t2_ban1</th>\n",
       "      <th>t2_ban2</th>\n",
       "      <th>t2_ban3</th>\n",
       "      <th>t2_ban4</th>\n",
       "      <th>t2_ban5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3326086514</td>\n",
       "      <td>1504279457970</td>\n",
       "      <td>1949</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>114</td>\n",
       "      <td>67</td>\n",
       "      <td>43</td>\n",
       "      <td>16</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3229566029</td>\n",
       "      <td>1497848803862</td>\n",
       "      <td>1851</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>67</td>\n",
       "      <td>238</td>\n",
       "      <td>51</td>\n",
       "      <td>420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3327363504</td>\n",
       "      <td>1504360103310</td>\n",
       "      <td>1493</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>157</td>\n",
       "      <td>238</td>\n",
       "      <td>121</td>\n",
       "      <td>57</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3326856598</td>\n",
       "      <td>1504348503996</td>\n",
       "      <td>1758</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>164</td>\n",
       "      <td>18</td>\n",
       "      <td>141</td>\n",
       "      <td>40</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3330080762</td>\n",
       "      <td>1504554410899</td>\n",
       "      <td>2094</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>11</td>\n",
       "      <td>201</td>\n",
       "      <td>122</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51485</th>\n",
       "      <td>3308904636</td>\n",
       "      <td>1503076540231</td>\n",
       "      <td>1944</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>55</td>\n",
       "      <td>-1</td>\n",
       "      <td>90</td>\n",
       "      <td>238</td>\n",
       "      <td>157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51486</th>\n",
       "      <td>3215685759</td>\n",
       "      <td>1496957179355</td>\n",
       "      <td>3304</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>157</td>\n",
       "      <td>55</td>\n",
       "      <td>119</td>\n",
       "      <td>154</td>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51487</th>\n",
       "      <td>3322765040</td>\n",
       "      <td>1504029863961</td>\n",
       "      <td>2156</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>113</td>\n",
       "      <td>122</td>\n",
       "      <td>53</td>\n",
       "      <td>11</td>\n",
       "      <td>157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51488</th>\n",
       "      <td>3256675373</td>\n",
       "      <td>1499562036246</td>\n",
       "      <td>1475</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>154</td>\n",
       "      <td>39</td>\n",
       "      <td>51</td>\n",
       "      <td>90</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51489</th>\n",
       "      <td>3317333020</td>\n",
       "      <td>1503612754059</td>\n",
       "      <td>1445</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>157</td>\n",
       "      <td>141</td>\n",
       "      <td>31</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>51490 rows × 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           gameId   creationTime  gameDuration  seasonId  winner  firstBlood  \\\n",
       "0      3326086514  1504279457970          1949         9       1           2   \n",
       "1      3229566029  1497848803862          1851         9       1           1   \n",
       "2      3327363504  1504360103310          1493         9       1           2   \n",
       "3      3326856598  1504348503996          1758         9       1           1   \n",
       "4      3330080762  1504554410899          2094         9       1           2   \n",
       "...           ...            ...           ...       ...     ...         ...   \n",
       "51485  3308904636  1503076540231          1944         9       2           1   \n",
       "51486  3215685759  1496957179355          3304         9       2           1   \n",
       "51487  3322765040  1504029863961          2156         9       2           2   \n",
       "51488  3256675373  1499562036246          1475         9       2           2   \n",
       "51489  3317333020  1503612754059          1445         9       1           1   \n",
       "\n",
       "       firstTower  firstInhibitor  firstBaron  firstDragon  ...  \\\n",
       "0               1               1           1            1  ...   \n",
       "1               1               1           0            1  ...   \n",
       "2               1               1           1            2  ...   \n",
       "3               1               1           1            1  ...   \n",
       "4               1               1           1            1  ...   \n",
       "...           ...             ...         ...          ...  ...   \n",
       "51485           2               2           0            2  ...   \n",
       "51486           1               2           2            2  ...   \n",
       "51487           2               2           0            1  ...   \n",
       "51488           2               2           0            2  ...   \n",
       "51489           1               1           1            2  ...   \n",
       "\n",
       "       t2_towerKills  t2_inhibitorKills  t2_baronKills  t2_dragonKills  \\\n",
       "0                  5                  0              0               1   \n",
       "1                  2                  0              0               0   \n",
       "2                  2                  0              0               1   \n",
       "3                  0                  0              0               0   \n",
       "4                  3                  0              0               1   \n",
       "...              ...                ...            ...             ...   \n",
       "51485             10                  2              0               4   \n",
       "51486             11                  7              4               4   \n",
       "51487             10                  2              0               2   \n",
       "51488             11                  3              0               1   \n",
       "51489              1                  0              0               1   \n",
       "\n",
       "       t2_riftHeraldKills  t2_ban1  t2_ban2  t2_ban3  t2_ban4  t2_ban5  \n",
       "0                       1      114       67       43       16       51  \n",
       "1                       0       11       67      238       51      420  \n",
       "2                       0      157      238      121       57       28  \n",
       "3                       0      164       18      141       40       51  \n",
       "4                       0       86       11      201      122       18  \n",
       "...                   ...      ...      ...      ...      ...      ...  \n",
       "51485                   0       55       -1       90      238      157  \n",
       "51486                   1      157       55      119      154      105  \n",
       "51487                   0      113      122       53       11      157  \n",
       "51488                   0      154       39       51       90      114  \n",
       "51489                   0       11      157      141       31       18  \n",
       "\n",
       "[51490 rows x 61 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "86bb5d77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:49.651431Z",
     "iopub.status.busy": "2024-06-09T18:33:49.651024Z",
     "iopub.status.idle": "2024-06-09T18:33:49.659532Z",
     "shell.execute_reply": "2024-06-09T18:33:49.658250Z"
    },
    "papermill": {
     "duration": 0.025066,
     "end_time": "2024-06-09T18:33:49.662176",
     "exception": false,
     "start_time": "2024-06-09T18:33:49.637110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['gameId', 'creationTime', 'gameDuration', 'seasonId', 'winner',\n",
       "       'firstBlood', 'firstTower', 'firstInhibitor', 'firstBaron',\n",
       "       'firstDragon', 'firstRiftHerald', 't1_champ1id', 't1_champ1_sum1',\n",
       "       't1_champ1_sum2', 't1_champ2id', 't1_champ2_sum1', 't1_champ2_sum2',\n",
       "       't1_champ3id', 't1_champ3_sum1', 't1_champ3_sum2', 't1_champ4id',\n",
       "       't1_champ4_sum1', 't1_champ4_sum2', 't1_champ5id', 't1_champ5_sum1',\n",
       "       't1_champ5_sum2', 't1_towerKills', 't1_inhibitorKills', 't1_baronKills',\n",
       "       't1_dragonKills', 't1_riftHeraldKills', 't1_ban1', 't1_ban2', 't1_ban3',\n",
       "       't1_ban4', 't1_ban5', 't2_champ1id', 't2_champ1_sum1', 't2_champ1_sum2',\n",
       "       't2_champ2id', 't2_champ2_sum1', 't2_champ2_sum2', 't2_champ3id',\n",
       "       't2_champ3_sum1', 't2_champ3_sum2', 't2_champ4id', 't2_champ4_sum1',\n",
       "       't2_champ4_sum2', 't2_champ5id', 't2_champ5_sum1', 't2_champ5_sum2',\n",
       "       't2_towerKills', 't2_inhibitorKills', 't2_baronKills', 't2_dragonKills',\n",
       "       't2_riftHeraldKills', 't2_ban1', 't2_ban2', 't2_ban3', 't2_ban4',\n",
       "       't2_ban5'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff585cf5",
   "metadata": {
    "papermill": {
     "duration": 0.013217,
     "end_time": "2024-06-09T18:33:49.689794",
     "exception": false,
     "start_time": "2024-06-09T18:33:49.676577",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing\n",
    "Champion IDs are mapped to their respective names using the champion information JSON file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "66a57919",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:49.717980Z",
     "iopub.status.busy": "2024-06-09T18:33:49.716862Z",
     "iopub.status.idle": "2024-06-09T18:33:49.733809Z",
     "shell.execute_reply": "2024-06-09T18:33:49.732539Z"
    },
    "papermill": {
     "duration": 0.034158,
     "end_time": "2024-06-09T18:33:49.736535",
     "exception": false,
     "start_time": "2024-06-09T18:33:49.702377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t1_champ1id</th>\n",
       "      <th>t1_champ2id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>119</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18</td>\n",
       "      <td>141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>57</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51485</th>\n",
       "      <td>19</td>\n",
       "      <td>429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51486</th>\n",
       "      <td>90</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51487</th>\n",
       "      <td>141</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51488</th>\n",
       "      <td>121</td>\n",
       "      <td>236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51489</th>\n",
       "      <td>89</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>51490 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       t1_champ1id  t1_champ2id\n",
       "0                8          432\n",
       "1              119           39\n",
       "2               18          141\n",
       "3               57           63\n",
       "4               19           29\n",
       "...            ...          ...\n",
       "51485           19          429\n",
       "51486           90           32\n",
       "51487          141           18\n",
       "51488          121          236\n",
       "51489           89            1\n",
       "\n",
       "[51490 rows x 2 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['t1_champ1id', 't1_champ2id']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6a9debd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:49.764880Z",
     "iopub.status.busy": "2024-06-09T18:33:49.764475Z",
     "iopub.status.idle": "2024-06-09T18:33:49.773321Z",
     "shell.execute_reply": "2024-06-09T18:33:49.771996Z"
    },
    "papermill": {
     "duration": 0.026502,
     "end_time": "2024-06-09T18:33:49.776497",
     "exception": false,
     "start_time": "2024-06-09T18:33:49.749995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "champ_data = json.load(open('/kaggle/input/league-of-legends/champion_info.json'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "06d4053c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:49.803764Z",
     "iopub.status.busy": "2024-06-09T18:33:49.803337Z",
     "iopub.status.idle": "2024-06-09T18:33:50.203603Z",
     "shell.execute_reply": "2024-06-09T18:33:50.202062Z"
    },
    "papermill": {
     "duration": 0.417217,
     "end_time": "2024-06-09T18:33:50.206828",
     "exception": false,
     "start_time": "2024-06-09T18:33:49.789611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['t1_champ1'] = df['t1_champ1id'].apply(lambda x: champ_data['data'][str(x)]['name'])\n",
    "df['t1_champ2'] = df['t1_champ2id'].apply(lambda x: champ_data['data'][str(x)]['name'])\n",
    "df['t1_champ3'] = df['t1_champ3id'].apply(lambda x: champ_data['data'][str(x)]['name'])\n",
    "df['t1_champ4'] = df['t1_champ4id'].apply(lambda x: champ_data['data'][str(x)]['name'])\n",
    "df['t1_champ5'] = df['t1_champ5id'].apply(lambda x: champ_data['data'][str(x)]['name'])\n",
    "\n",
    "df['t2_champ1'] = df['t2_champ1id'].apply(lambda x: champ_data['data'][str(x)]['name'])\n",
    "df['t2_champ2'] = df['t2_champ2id'].apply(lambda x: champ_data['data'][str(x)]['name'])\n",
    "df['t2_champ3'] = df['t2_champ3id'].apply(lambda x: champ_data['data'][str(x)]['name'])\n",
    "df['t2_champ4'] = df['t2_champ4id'].apply(lambda x: champ_data['data'][str(x)]['name'])\n",
    "df['t2_champ5'] = df['t2_champ5id'].apply(lambda x: champ_data['data'][str(x)]['name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "76c93ac2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:50.234830Z",
     "iopub.status.busy": "2024-06-09T18:33:50.234409Z",
     "iopub.status.idle": "2024-06-09T18:33:50.358364Z",
     "shell.execute_reply": "2024-06-09T18:33:50.356713Z"
    },
    "papermill": {
     "duration": 0.141496,
     "end_time": "2024-06-09T18:33:50.361284",
     "exception": false,
     "start_time": "2024-06-09T18:33:50.219788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gameId</th>\n",
       "      <th>creationTime</th>\n",
       "      <th>gameDuration</th>\n",
       "      <th>seasonId</th>\n",
       "      <th>winner</th>\n",
       "      <th>firstBlood</th>\n",
       "      <th>firstTower</th>\n",
       "      <th>firstInhibitor</th>\n",
       "      <th>firstBaron</th>\n",
       "      <th>firstDragon</th>\n",
       "      <th>...</th>\n",
       "      <th>t1_champ1</th>\n",
       "      <th>t1_champ2</th>\n",
       "      <th>t1_champ3</th>\n",
       "      <th>t1_champ4</th>\n",
       "      <th>t1_champ5</th>\n",
       "      <th>t2_champ1</th>\n",
       "      <th>t2_champ2</th>\n",
       "      <th>t2_champ3</th>\n",
       "      <th>t2_champ4</th>\n",
       "      <th>t2_champ5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3326086514</td>\n",
       "      <td>1504279457970</td>\n",
       "      <td>1949</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>Vladimir</td>\n",
       "      <td>Bard</td>\n",
       "      <td>Kog'Maw</td>\n",
       "      <td>Master Yi</td>\n",
       "      <td>Viktor</td>\n",
       "      <td>Graves</td>\n",
       "      <td>Xayah</td>\n",
       "      <td>Darius</td>\n",
       "      <td>Zed</td>\n",
       "      <td>Thresh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3229566029</td>\n",
       "      <td>1497848803862</td>\n",
       "      <td>1851</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>Draven</td>\n",
       "      <td>Irelia</td>\n",
       "      <td>Nidalee</td>\n",
       "      <td>Kayle</td>\n",
       "      <td>Shaco</td>\n",
       "      <td>Malphite</td>\n",
       "      <td>Morgana</td>\n",
       "      <td>Hecarim</td>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Riven</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3327363504</td>\n",
       "      <td>1504360103310</td>\n",
       "      <td>1493</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>Tristana</td>\n",
       "      <td>Kayn</td>\n",
       "      <td>Nami</td>\n",
       "      <td>Rumble</td>\n",
       "      <td>Kassadin</td>\n",
       "      <td>Cassiopeia</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>Jayce</td>\n",
       "      <td>Jax</td>\n",
       "      <td>Ashe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3326856598</td>\n",
       "      <td>1504348503996</td>\n",
       "      <td>1758</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>Maokai</td>\n",
       "      <td>Brand</td>\n",
       "      <td>Twitch</td>\n",
       "      <td>Orianna</td>\n",
       "      <td>Dr. Mundo</td>\n",
       "      <td>Malzahar</td>\n",
       "      <td>Warwick</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>Riven</td>\n",
       "      <td>Ashe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3330080762</td>\n",
       "      <td>1504554410899</td>\n",
       "      <td>2094</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>Warwick</td>\n",
       "      <td>Twitch</td>\n",
       "      <td>Janna</td>\n",
       "      <td>Draven</td>\n",
       "      <td>Syndra</td>\n",
       "      <td>Sona</td>\n",
       "      <td>Jarvan IV</td>\n",
       "      <td>Kayn</td>\n",
       "      <td>Kassadin</td>\n",
       "      <td>Caitlyn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51485</th>\n",
       "      <td>3308904636</td>\n",
       "      <td>1503076540231</td>\n",
       "      <td>1944</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>Warwick</td>\n",
       "      <td>Kalista</td>\n",
       "      <td>Talon</td>\n",
       "      <td>Bard</td>\n",
       "      <td>Lee Sin</td>\n",
       "      <td>Veigar</td>\n",
       "      <td>Yorick</td>\n",
       "      <td>Vayne</td>\n",
       "      <td>Janna</td>\n",
       "      <td>Gragas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51486</th>\n",
       "      <td>3215685759</td>\n",
       "      <td>1496957179355</td>\n",
       "      <td>3304</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>Malzahar</td>\n",
       "      <td>Amumu</td>\n",
       "      <td>Cho'Gath</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>Tristana</td>\n",
       "      <td>Shyvana</td>\n",
       "      <td>Kalista</td>\n",
       "      <td>Leona</td>\n",
       "      <td>Nasus</td>\n",
       "      <td>Veigar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51487</th>\n",
       "      <td>3322765040</td>\n",
       "      <td>1504029863961</td>\n",
       "      <td>2156</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>Kayn</td>\n",
       "      <td>Tristana</td>\n",
       "      <td>Bard</td>\n",
       "      <td>Ezreal</td>\n",
       "      <td>Rumble</td>\n",
       "      <td>Annie</td>\n",
       "      <td>Draven</td>\n",
       "      <td>Rammus</td>\n",
       "      <td>Karma</td>\n",
       "      <td>Lux</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51488</th>\n",
       "      <td>3256675373</td>\n",
       "      <td>1499562036246</td>\n",
       "      <td>1475</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>Kha'Zix</td>\n",
       "      <td>Lucian</td>\n",
       "      <td>Illaoi</td>\n",
       "      <td>Braum</td>\n",
       "      <td>Lux</td>\n",
       "      <td>Miss Fortune</td>\n",
       "      <td>Nocturne</td>\n",
       "      <td>Morgana</td>\n",
       "      <td>Karthus</td>\n",
       "      <td>Master Yi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51489</th>\n",
       "      <td>3317333020</td>\n",
       "      <td>1503612754059</td>\n",
       "      <td>1445</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>Leona</td>\n",
       "      <td>Annie</td>\n",
       "      <td>Camille</td>\n",
       "      <td>Sejuani</td>\n",
       "      <td>Jhin</td>\n",
       "      <td>Brand</td>\n",
       "      <td>Teemo</td>\n",
       "      <td>Twitch</td>\n",
       "      <td>Kha'Zix</td>\n",
       "      <td>Renekton</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>51490 rows × 71 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           gameId   creationTime  gameDuration  seasonId  winner  firstBlood  \\\n",
       "0      3326086514  1504279457970          1949         9       1           2   \n",
       "1      3229566029  1497848803862          1851         9       1           1   \n",
       "2      3327363504  1504360103310          1493         9       1           2   \n",
       "3      3326856598  1504348503996          1758         9       1           1   \n",
       "4      3330080762  1504554410899          2094         9       1           2   \n",
       "...           ...            ...           ...       ...     ...         ...   \n",
       "51485  3308904636  1503076540231          1944         9       2           1   \n",
       "51486  3215685759  1496957179355          3304         9       2           1   \n",
       "51487  3322765040  1504029863961          2156         9       2           2   \n",
       "51488  3256675373  1499562036246          1475         9       2           2   \n",
       "51489  3317333020  1503612754059          1445         9       1           1   \n",
       "\n",
       "       firstTower  firstInhibitor  firstBaron  firstDragon  ...  t1_champ1  \\\n",
       "0               1               1           1            1  ...   Vladimir   \n",
       "1               1               1           0            1  ...     Draven   \n",
       "2               1               1           1            2  ...   Tristana   \n",
       "3               1               1           1            1  ...     Maokai   \n",
       "4               1               1           1            1  ...    Warwick   \n",
       "...           ...             ...         ...          ...  ...        ...   \n",
       "51485           2               2           0            2  ...    Warwick   \n",
       "51486           1               2           2            2  ...   Malzahar   \n",
       "51487           2               2           0            1  ...       Kayn   \n",
       "51488           2               2           0            2  ...    Kha'Zix   \n",
       "51489           1               1           1            2  ...      Leona   \n",
       "\n",
       "       t1_champ2  t1_champ3  t1_champ4  t1_champ5     t2_champ1  t2_champ2  \\\n",
       "0           Bard    Kog'Maw  Master Yi     Viktor        Graves      Xayah   \n",
       "1         Irelia    Nidalee      Kayle      Shaco      Malphite    Morgana   \n",
       "2           Kayn       Nami     Rumble   Kassadin    Cassiopeia     Thresh   \n",
       "3          Brand     Twitch    Orianna  Dr. Mundo      Malzahar    Warwick   \n",
       "4         Twitch      Janna     Draven     Syndra          Sona  Jarvan IV   \n",
       "...          ...        ...        ...        ...           ...        ...   \n",
       "51485    Kalista      Talon       Bard    Lee Sin        Veigar     Yorick   \n",
       "51486      Amumu   Cho'Gath     Thresh   Tristana       Shyvana    Kalista   \n",
       "51487   Tristana       Bard     Ezreal     Rumble         Annie     Draven   \n",
       "51488     Lucian     Illaoi      Braum        Lux  Miss Fortune   Nocturne   \n",
       "51489      Annie    Camille    Sejuani       Jhin         Brand      Teemo   \n",
       "\n",
       "       t2_champ3  t2_champ4  t2_champ5  \n",
       "0         Darius        Zed     Thresh  \n",
       "1        Hecarim      Yasuo      Riven  \n",
       "2          Jayce        Jax       Ashe  \n",
       "3         Thresh      Riven       Ashe  \n",
       "4           Kayn   Kassadin    Caitlyn  \n",
       "...          ...        ...        ...  \n",
       "51485      Vayne      Janna     Gragas  \n",
       "51486      Leona      Nasus     Veigar  \n",
       "51487     Rammus      Karma        Lux  \n",
       "51488    Morgana    Karthus  Master Yi  \n",
       "51489     Twitch    Kha'Zix   Renekton  \n",
       "\n",
       "[51490 rows x 71 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e0bd91c",
   "metadata": {
    "papermill": {
     "duration": 0.013933,
     "end_time": "2024-06-09T18:33:50.389191",
     "exception": false,
     "start_time": "2024-06-09T18:33:50.375258",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The dataset is then filtered to include relevant columns for the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b69f7ea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:50.420948Z",
     "iopub.status.busy": "2024-06-09T18:33:50.420514Z",
     "iopub.status.idle": "2024-06-09T18:33:50.442397Z",
     "shell.execute_reply": "2024-06-09T18:33:50.441149Z"
    },
    "papermill": {
     "duration": 0.0411,
     "end_time": "2024-06-09T18:33:50.445127",
     "exception": false,
     "start_time": "2024-06-09T18:33:50.404027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df[['t1_champ1', 't1_champ2', 't1_champ3', 't1_champ4', 't1_champ5', 't2_champ1', 't2_champ2', 't2_champ3', 't2_champ4', 't2_champ5', 'firstBlood', 'firstTower', 'firstInhibitor', 'firstBaron', 'firstDragon', 'firstRiftHerald', 'winner']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "84cb3f32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:50.472805Z",
     "iopub.status.busy": "2024-06-09T18:33:50.472099Z",
     "iopub.status.idle": "2024-06-09T18:33:50.503334Z",
     "shell.execute_reply": "2024-06-09T18:33:50.502125Z"
    },
    "papermill": {
     "duration": 0.04835,
     "end_time": "2024-06-09T18:33:50.506325",
     "exception": false,
     "start_time": "2024-06-09T18:33:50.457975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t1_champ1</th>\n",
       "      <th>t1_champ2</th>\n",
       "      <th>t1_champ3</th>\n",
       "      <th>t1_champ4</th>\n",
       "      <th>t1_champ5</th>\n",
       "      <th>t2_champ1</th>\n",
       "      <th>t2_champ2</th>\n",
       "      <th>t2_champ3</th>\n",
       "      <th>t2_champ4</th>\n",
       "      <th>t2_champ5</th>\n",
       "      <th>firstBlood</th>\n",
       "      <th>firstTower</th>\n",
       "      <th>firstInhibitor</th>\n",
       "      <th>firstBaron</th>\n",
       "      <th>firstDragon</th>\n",
       "      <th>firstRiftHerald</th>\n",
       "      <th>winner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Vladimir</td>\n",
       "      <td>Bard</td>\n",
       "      <td>Kog'Maw</td>\n",
       "      <td>Master Yi</td>\n",
       "      <td>Viktor</td>\n",
       "      <td>Graves</td>\n",
       "      <td>Xayah</td>\n",
       "      <td>Darius</td>\n",
       "      <td>Zed</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Draven</td>\n",
       "      <td>Irelia</td>\n",
       "      <td>Nidalee</td>\n",
       "      <td>Kayle</td>\n",
       "      <td>Shaco</td>\n",
       "      <td>Malphite</td>\n",
       "      <td>Morgana</td>\n",
       "      <td>Hecarim</td>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Riven</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Tristana</td>\n",
       "      <td>Kayn</td>\n",
       "      <td>Nami</td>\n",
       "      <td>Rumble</td>\n",
       "      <td>Kassadin</td>\n",
       "      <td>Cassiopeia</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>Jayce</td>\n",
       "      <td>Jax</td>\n",
       "      <td>Ashe</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Maokai</td>\n",
       "      <td>Brand</td>\n",
       "      <td>Twitch</td>\n",
       "      <td>Orianna</td>\n",
       "      <td>Dr. Mundo</td>\n",
       "      <td>Malzahar</td>\n",
       "      <td>Warwick</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>Riven</td>\n",
       "      <td>Ashe</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Warwick</td>\n",
       "      <td>Twitch</td>\n",
       "      <td>Janna</td>\n",
       "      <td>Draven</td>\n",
       "      <td>Syndra</td>\n",
       "      <td>Sona</td>\n",
       "      <td>Jarvan IV</td>\n",
       "      <td>Kayn</td>\n",
       "      <td>Kassadin</td>\n",
       "      <td>Caitlyn</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51485</th>\n",
       "      <td>Warwick</td>\n",
       "      <td>Kalista</td>\n",
       "      <td>Talon</td>\n",
       "      <td>Bard</td>\n",
       "      <td>Lee Sin</td>\n",
       "      <td>Veigar</td>\n",
       "      <td>Yorick</td>\n",
       "      <td>Vayne</td>\n",
       "      <td>Janna</td>\n",
       "      <td>Gragas</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51486</th>\n",
       "      <td>Malzahar</td>\n",
       "      <td>Amumu</td>\n",
       "      <td>Cho'Gath</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>Tristana</td>\n",
       "      <td>Shyvana</td>\n",
       "      <td>Kalista</td>\n",
       "      <td>Leona</td>\n",
       "      <td>Nasus</td>\n",
       "      <td>Veigar</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51487</th>\n",
       "      <td>Kayn</td>\n",
       "      <td>Tristana</td>\n",
       "      <td>Bard</td>\n",
       "      <td>Ezreal</td>\n",
       "      <td>Rumble</td>\n",
       "      <td>Annie</td>\n",
       "      <td>Draven</td>\n",
       "      <td>Rammus</td>\n",
       "      <td>Karma</td>\n",
       "      <td>Lux</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51488</th>\n",
       "      <td>Kha'Zix</td>\n",
       "      <td>Lucian</td>\n",
       "      <td>Illaoi</td>\n",
       "      <td>Braum</td>\n",
       "      <td>Lux</td>\n",
       "      <td>Miss Fortune</td>\n",
       "      <td>Nocturne</td>\n",
       "      <td>Morgana</td>\n",
       "      <td>Karthus</td>\n",
       "      <td>Master Yi</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51489</th>\n",
       "      <td>Leona</td>\n",
       "      <td>Annie</td>\n",
       "      <td>Camille</td>\n",
       "      <td>Sejuani</td>\n",
       "      <td>Jhin</td>\n",
       "      <td>Brand</td>\n",
       "      <td>Teemo</td>\n",
       "      <td>Twitch</td>\n",
       "      <td>Kha'Zix</td>\n",
       "      <td>Renekton</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>51490 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      t1_champ1 t1_champ2 t1_champ3  t1_champ4  t1_champ5     t2_champ1  \\\n",
       "0      Vladimir      Bard   Kog'Maw  Master Yi     Viktor        Graves   \n",
       "1        Draven    Irelia   Nidalee      Kayle      Shaco      Malphite   \n",
       "2      Tristana      Kayn      Nami     Rumble   Kassadin    Cassiopeia   \n",
       "3        Maokai     Brand    Twitch    Orianna  Dr. Mundo      Malzahar   \n",
       "4       Warwick    Twitch     Janna     Draven     Syndra          Sona   \n",
       "...         ...       ...       ...        ...        ...           ...   \n",
       "51485   Warwick   Kalista     Talon       Bard    Lee Sin        Veigar   \n",
       "51486  Malzahar     Amumu  Cho'Gath     Thresh   Tristana       Shyvana   \n",
       "51487      Kayn  Tristana      Bard     Ezreal     Rumble         Annie   \n",
       "51488   Kha'Zix    Lucian    Illaoi      Braum        Lux  Miss Fortune   \n",
       "51489     Leona     Annie   Camille    Sejuani       Jhin         Brand   \n",
       "\n",
       "       t2_champ2 t2_champ3 t2_champ4  t2_champ5  firstBlood  firstTower  \\\n",
       "0          Xayah    Darius       Zed     Thresh           2           1   \n",
       "1        Morgana   Hecarim     Yasuo      Riven           1           1   \n",
       "2         Thresh     Jayce       Jax       Ashe           2           1   \n",
       "3        Warwick    Thresh     Riven       Ashe           1           1   \n",
       "4      Jarvan IV      Kayn  Kassadin    Caitlyn           2           1   \n",
       "...          ...       ...       ...        ...         ...         ...   \n",
       "51485     Yorick     Vayne     Janna     Gragas           1           2   \n",
       "51486    Kalista     Leona     Nasus     Veigar           1           1   \n",
       "51487     Draven    Rammus     Karma        Lux           2           2   \n",
       "51488   Nocturne   Morgana   Karthus  Master Yi           2           2   \n",
       "51489      Teemo    Twitch   Kha'Zix   Renekton           1           1   \n",
       "\n",
       "       firstInhibitor  firstBaron  firstDragon  firstRiftHerald  winner  \n",
       "0                   1           1            1                2       1  \n",
       "1                   1           0            1                1       1  \n",
       "2                   1           1            2                0       1  \n",
       "3                   1           1            1                0       1  \n",
       "4                   1           1            1                0       1  \n",
       "...               ...         ...          ...              ...     ...  \n",
       "51485               2           0            2                0       2  \n",
       "51486               2           2            2                2       2  \n",
       "51487               2           0            1                0       2  \n",
       "51488               2           0            2                0       2  \n",
       "51489               1           1            2                0       1  \n",
       "\n",
       "[51490 rows x 17 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "942420c3",
   "metadata": {
    "papermill": {
     "duration": 0.013668,
     "end_time": "2024-06-09T18:33:50.534247",
     "exception": false,
     "start_time": "2024-06-09T18:33:50.520579",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "One-hot encoding is applied to the champion columns to convert categorical data into numerical format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b1987bb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:50.565893Z",
     "iopub.status.busy": "2024-06-09T18:33:50.565477Z",
     "iopub.status.idle": "2024-06-09T18:33:50.942612Z",
     "shell.execute_reply": "2024-06-09T18:33:50.940938Z"
    },
    "papermill": {
     "duration": 0.395424,
     "end_time": "2024-06-09T18:33:50.945738",
     "exception": false,
     "start_time": "2024-06-09T18:33:50.550314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "encodings1 = [pd.get_dummies(df[col], prefix = 't1') for col in ['t1_champ1', 't1_champ2', 't1_champ3', 't1_champ4', 't1_champ5']]\n",
    "\n",
    "combined_df1 = sum(encodings1)\n",
    "\n",
    "encodings2 = [pd.get_dummies(df[col], prefix = 't2') for col in ['t2_champ1', 't2_champ2', 't1_champ3', 't2_champ4', 't2_champ5']]\n",
    "\n",
    "combined_df2 = sum(encodings2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6755a2a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:50.977778Z",
     "iopub.status.busy": "2024-06-09T18:33:50.976817Z",
     "iopub.status.idle": "2024-06-09T18:33:51.173542Z",
     "shell.execute_reply": "2024-06-09T18:33:51.172097Z"
    },
    "papermill": {
     "duration": 0.215701,
     "end_time": "2024-06-09T18:33:51.176612",
     "exception": false,
     "start_time": "2024-06-09T18:33:50.960911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.join(combined_df1).join(combined_df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7fc11fe7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:51.208530Z",
     "iopub.status.busy": "2024-06-09T18:33:51.208120Z",
     "iopub.status.idle": "2024-06-09T18:33:51.283647Z",
     "shell.execute_reply": "2024-06-09T18:33:51.282356Z"
    },
    "papermill": {
     "duration": 0.095747,
     "end_time": "2024-06-09T18:33:51.286679",
     "exception": false,
     "start_time": "2024-06-09T18:33:51.190932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t1_champ1</th>\n",
       "      <th>t1_champ2</th>\n",
       "      <th>t1_champ3</th>\n",
       "      <th>t1_champ4</th>\n",
       "      <th>t1_champ5</th>\n",
       "      <th>t2_champ1</th>\n",
       "      <th>t2_champ2</th>\n",
       "      <th>t2_champ3</th>\n",
       "      <th>t2_champ4</th>\n",
       "      <th>t2_champ5</th>\n",
       "      <th>...</th>\n",
       "      <th>t2_Xayah</th>\n",
       "      <th>t2_Xerath</th>\n",
       "      <th>t2_Xin Zhao</th>\n",
       "      <th>t2_Yasuo</th>\n",
       "      <th>t2_Yorick</th>\n",
       "      <th>t2_Zac</th>\n",
       "      <th>t2_Zed</th>\n",
       "      <th>t2_Ziggs</th>\n",
       "      <th>t2_Zilean</th>\n",
       "      <th>t2_Zyra</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Vladimir</td>\n",
       "      <td>Bard</td>\n",
       "      <td>Kog'Maw</td>\n",
       "      <td>Master Yi</td>\n",
       "      <td>Viktor</td>\n",
       "      <td>Graves</td>\n",
       "      <td>Xayah</td>\n",
       "      <td>Darius</td>\n",
       "      <td>Zed</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Draven</td>\n",
       "      <td>Irelia</td>\n",
       "      <td>Nidalee</td>\n",
       "      <td>Kayle</td>\n",
       "      <td>Shaco</td>\n",
       "      <td>Malphite</td>\n",
       "      <td>Morgana</td>\n",
       "      <td>Hecarim</td>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Riven</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Tristana</td>\n",
       "      <td>Kayn</td>\n",
       "      <td>Nami</td>\n",
       "      <td>Rumble</td>\n",
       "      <td>Kassadin</td>\n",
       "      <td>Cassiopeia</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>Jayce</td>\n",
       "      <td>Jax</td>\n",
       "      <td>Ashe</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Maokai</td>\n",
       "      <td>Brand</td>\n",
       "      <td>Twitch</td>\n",
       "      <td>Orianna</td>\n",
       "      <td>Dr. Mundo</td>\n",
       "      <td>Malzahar</td>\n",
       "      <td>Warwick</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>Riven</td>\n",
       "      <td>Ashe</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Warwick</td>\n",
       "      <td>Twitch</td>\n",
       "      <td>Janna</td>\n",
       "      <td>Draven</td>\n",
       "      <td>Syndra</td>\n",
       "      <td>Sona</td>\n",
       "      <td>Jarvan IV</td>\n",
       "      <td>Kayn</td>\n",
       "      <td>Kassadin</td>\n",
       "      <td>Caitlyn</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51485</th>\n",
       "      <td>Warwick</td>\n",
       "      <td>Kalista</td>\n",
       "      <td>Talon</td>\n",
       "      <td>Bard</td>\n",
       "      <td>Lee Sin</td>\n",
       "      <td>Veigar</td>\n",
       "      <td>Yorick</td>\n",
       "      <td>Vayne</td>\n",
       "      <td>Janna</td>\n",
       "      <td>Gragas</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51486</th>\n",
       "      <td>Malzahar</td>\n",
       "      <td>Amumu</td>\n",
       "      <td>Cho'Gath</td>\n",
       "      <td>Thresh</td>\n",
       "      <td>Tristana</td>\n",
       "      <td>Shyvana</td>\n",
       "      <td>Kalista</td>\n",
       "      <td>Leona</td>\n",
       "      <td>Nasus</td>\n",
       "      <td>Veigar</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51487</th>\n",
       "      <td>Kayn</td>\n",
       "      <td>Tristana</td>\n",
       "      <td>Bard</td>\n",
       "      <td>Ezreal</td>\n",
       "      <td>Rumble</td>\n",
       "      <td>Annie</td>\n",
       "      <td>Draven</td>\n",
       "      <td>Rammus</td>\n",
       "      <td>Karma</td>\n",
       "      <td>Lux</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51488</th>\n",
       "      <td>Kha'Zix</td>\n",
       "      <td>Lucian</td>\n",
       "      <td>Illaoi</td>\n",
       "      <td>Braum</td>\n",
       "      <td>Lux</td>\n",
       "      <td>Miss Fortune</td>\n",
       "      <td>Nocturne</td>\n",
       "      <td>Morgana</td>\n",
       "      <td>Karthus</td>\n",
       "      <td>Master Yi</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51489</th>\n",
       "      <td>Leona</td>\n",
       "      <td>Annie</td>\n",
       "      <td>Camille</td>\n",
       "      <td>Sejuani</td>\n",
       "      <td>Jhin</td>\n",
       "      <td>Brand</td>\n",
       "      <td>Teemo</td>\n",
       "      <td>Twitch</td>\n",
       "      <td>Kha'Zix</td>\n",
       "      <td>Renekton</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>51490 rows × 293 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      t1_champ1 t1_champ2 t1_champ3  t1_champ4  t1_champ5     t2_champ1  \\\n",
       "0      Vladimir      Bard   Kog'Maw  Master Yi     Viktor        Graves   \n",
       "1        Draven    Irelia   Nidalee      Kayle      Shaco      Malphite   \n",
       "2      Tristana      Kayn      Nami     Rumble   Kassadin    Cassiopeia   \n",
       "3        Maokai     Brand    Twitch    Orianna  Dr. Mundo      Malzahar   \n",
       "4       Warwick    Twitch     Janna     Draven     Syndra          Sona   \n",
       "...         ...       ...       ...        ...        ...           ...   \n",
       "51485   Warwick   Kalista     Talon       Bard    Lee Sin        Veigar   \n",
       "51486  Malzahar     Amumu  Cho'Gath     Thresh   Tristana       Shyvana   \n",
       "51487      Kayn  Tristana      Bard     Ezreal     Rumble         Annie   \n",
       "51488   Kha'Zix    Lucian    Illaoi      Braum        Lux  Miss Fortune   \n",
       "51489     Leona     Annie   Camille    Sejuani       Jhin         Brand   \n",
       "\n",
       "       t2_champ2 t2_champ3 t2_champ4  t2_champ5  ...  t2_Xayah  t2_Xerath  \\\n",
       "0          Xayah    Darius       Zed     Thresh  ...         1          0   \n",
       "1        Morgana   Hecarim     Yasuo      Riven  ...         0          0   \n",
       "2         Thresh     Jayce       Jax       Ashe  ...         0          0   \n",
       "3        Warwick    Thresh     Riven       Ashe  ...         0          0   \n",
       "4      Jarvan IV      Kayn  Kassadin    Caitlyn  ...         0          0   \n",
       "...          ...       ...       ...        ...  ...       ...        ...   \n",
       "51485     Yorick     Vayne     Janna     Gragas  ...         0          0   \n",
       "51486    Kalista     Leona     Nasus     Veigar  ...         0          0   \n",
       "51487     Draven    Rammus     Karma        Lux  ...         0          0   \n",
       "51488   Nocturne   Morgana   Karthus  Master Yi  ...         0          0   \n",
       "51489      Teemo    Twitch   Kha'Zix   Renekton  ...         0          0   \n",
       "\n",
       "       t2_Xin Zhao  t2_Yasuo  t2_Yorick  t2_Zac  t2_Zed  t2_Ziggs  t2_Zilean  \\\n",
       "0                0         0          0       0       1         0          0   \n",
       "1                0         1          0       0       0         0          0   \n",
       "2                0         0          0       0       0         0          0   \n",
       "3                0         0          0       0       0         0          0   \n",
       "4                0         0          0       0       0         0          0   \n",
       "...            ...       ...        ...     ...     ...       ...        ...   \n",
       "51485            0         0          1       0       0         0          0   \n",
       "51486            0         0          0       0       0         0          0   \n",
       "51487            0         0          0       0       0         0          0   \n",
       "51488            0         0          0       0       0         0          0   \n",
       "51489            0         0          0       0       0         0          0   \n",
       "\n",
       "       t2_Zyra  \n",
       "0            0  \n",
       "1            0  \n",
       "2            0  \n",
       "3            0  \n",
       "4            0  \n",
       "...        ...  \n",
       "51485        0  \n",
       "51486        0  \n",
       "51487        0  \n",
       "51488        0  \n",
       "51489        0  \n",
       "\n",
       "[51490 rows x 293 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6fad84e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:51.319498Z",
     "iopub.status.busy": "2024-06-09T18:33:51.319027Z",
     "iopub.status.idle": "2024-06-09T18:33:51.368359Z",
     "shell.execute_reply": "2024-06-09T18:33:51.366989Z"
    },
    "papermill": {
     "duration": 0.070508,
     "end_time": "2024-06-09T18:33:51.372283",
     "exception": false,
     "start_time": "2024-06-09T18:33:51.301775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df= df.drop(['t1_champ1', 't1_champ2', 't1_champ3', 't1_champ4', 't1_champ5', 't2_champ1', 't2_champ2', 't2_champ3', 't2_champ4', 't2_champ5'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f7f15c43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:51.404513Z",
     "iopub.status.busy": "2024-06-09T18:33:51.404029Z",
     "iopub.status.idle": "2024-06-09T18:33:51.461687Z",
     "shell.execute_reply": "2024-06-09T18:33:51.460121Z"
    },
    "papermill": {
     "duration": 0.076749,
     "end_time": "2024-06-09T18:33:51.464286",
     "exception": false,
     "start_time": "2024-06-09T18:33:51.387537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>firstBlood</th>\n",
       "      <th>firstTower</th>\n",
       "      <th>firstInhibitor</th>\n",
       "      <th>firstBaron</th>\n",
       "      <th>firstDragon</th>\n",
       "      <th>firstRiftHerald</th>\n",
       "      <th>winner</th>\n",
       "      <th>t1_Aatrox</th>\n",
       "      <th>t1_Ahri</th>\n",
       "      <th>t1_Akali</th>\n",
       "      <th>...</th>\n",
       "      <th>t2_Xayah</th>\n",
       "      <th>t2_Xerath</th>\n",
       "      <th>t2_Xin Zhao</th>\n",
       "      <th>t2_Yasuo</th>\n",
       "      <th>t2_Yorick</th>\n",
       "      <th>t2_Zac</th>\n",
       "      <th>t2_Zed</th>\n",
       "      <th>t2_Ziggs</th>\n",
       "      <th>t2_Zilean</th>\n",
       "      <th>t2_Zyra</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51485</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51486</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51487</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51488</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51489</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>51490 rows × 283 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       firstBlood  firstTower  firstInhibitor  firstBaron  firstDragon  \\\n",
       "0               2           1               1           1            1   \n",
       "1               1           1               1           0            1   \n",
       "2               2           1               1           1            2   \n",
       "3               1           1               1           1            1   \n",
       "4               2           1               1           1            1   \n",
       "...           ...         ...             ...         ...          ...   \n",
       "51485           1           2               2           0            2   \n",
       "51486           1           1               2           2            2   \n",
       "51487           2           2               2           0            1   \n",
       "51488           2           2               2           0            2   \n",
       "51489           1           1               1           1            2   \n",
       "\n",
       "       firstRiftHerald  winner  t1_Aatrox  t1_Ahri  t1_Akali  ...  t2_Xayah  \\\n",
       "0                    2       1          0        0         0  ...         1   \n",
       "1                    1       1          0        0         0  ...         0   \n",
       "2                    0       1          0        0         0  ...         0   \n",
       "3                    0       1          0        0         0  ...         0   \n",
       "4                    0       1          0        0         0  ...         0   \n",
       "...                ...     ...        ...      ...       ...  ...       ...   \n",
       "51485                0       2          0        0         0  ...         0   \n",
       "51486                2       2          0        0         0  ...         0   \n",
       "51487                0       2          0        0         0  ...         0   \n",
       "51488                0       2          0        0         0  ...         0   \n",
       "51489                0       1          0        0         0  ...         0   \n",
       "\n",
       "       t2_Xerath  t2_Xin Zhao  t2_Yasuo  t2_Yorick  t2_Zac  t2_Zed  t2_Ziggs  \\\n",
       "0              0            0         0          0       0       1         0   \n",
       "1              0            0         1          0       0       0         0   \n",
       "2              0            0         0          0       0       0         0   \n",
       "3              0            0         0          0       0       0         0   \n",
       "4              0            0         0          0       0       0         0   \n",
       "...          ...          ...       ...        ...     ...     ...       ...   \n",
       "51485          0            0         0          1       0       0         0   \n",
       "51486          0            0         0          0       0       0         0   \n",
       "51487          0            0         0          0       0       0         0   \n",
       "51488          0            0         0          0       0       0         0   \n",
       "51489          0            0         0          0       0       0         0   \n",
       "\n",
       "       t2_Zilean  t2_Zyra  \n",
       "0              0        0  \n",
       "1              0        0  \n",
       "2              0        0  \n",
       "3              0        0  \n",
       "4              0        0  \n",
       "...          ...      ...  \n",
       "51485          0        0  \n",
       "51486          0        0  \n",
       "51487          0        0  \n",
       "51488          0        0  \n",
       "51489          0        0  \n",
       "\n",
       "[51490 rows x 283 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "573093a3",
   "metadata": {
    "papermill": {
     "duration": 0.016204,
     "end_time": "2024-06-09T18:33:51.497061",
     "exception": false,
     "start_time": "2024-06-09T18:33:51.480857",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Training Random Forest Classifier**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f58e1207",
   "metadata": {
    "papermill": {
     "duration": 0.015258,
     "end_time": "2024-06-09T18:33:51.529514",
     "exception": false,
     "start_time": "2024-06-09T18:33:51.514256",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training the Model\n",
    "A Random Forest Classifier is used to train the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "57d5d2c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:51.563021Z",
     "iopub.status.busy": "2024-06-09T18:33:51.562598Z",
     "iopub.status.idle": "2024-06-09T18:33:53.531247Z",
     "shell.execute_reply": "2024-06-09T18:33:53.529136Z"
    },
    "papermill": {
     "duration": 1.989543,
     "end_time": "2024-06-09T18:33:53.534614",
     "exception": false,
     "start_time": "2024-06-09T18:33:51.545071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bf1b1185",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:53.572175Z",
     "iopub.status.busy": "2024-06-09T18:33:53.571379Z",
     "iopub.status.idle": "2024-06-09T18:33:53.782491Z",
     "shell.execute_reply": "2024-06-09T18:33:53.781217Z"
    },
    "papermill": {
     "duration": 0.235996,
     "end_time": "2024-06-09T18:33:53.785552",
     "exception": false,
     "start_time": "2024-06-09T18:33:53.549556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x, y = df.drop('winner', axis = 1), df['winner']\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b628d934",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:33:53.822389Z",
     "iopub.status.busy": "2024-06-09T18:33:53.821812Z",
     "iopub.status.idle": "2024-06-09T18:34:00.573605Z",
     "shell.execute_reply": "2024-06-09T18:34:00.572184Z"
    },
    "papermill": {
     "duration": 6.773309,
     "end_time": "2024-06-09T18:34:00.576538",
     "exception": false,
     "start_time": "2024-06-09T18:33:53.803229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_jobs=-1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_jobs=-1)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(n_jobs=-1)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = RandomForestClassifier(n_jobs = -1)\n",
    "\n",
    "clf.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "df438831",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:34:00.608813Z",
     "iopub.status.busy": "2024-06-09T18:34:00.608393Z",
     "iopub.status.idle": "2024-06-09T18:34:00.833382Z",
     "shell.execute_reply": "2024-06-09T18:34:00.832196Z"
    },
    "papermill": {
     "duration": 0.243884,
     "end_time": "2024-06-09T18:34:00.835984",
     "exception": false,
     "start_time": "2024-06-09T18:34:00.592100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.901242959798019"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a86f812",
   "metadata": {
    "papermill": {
     "duration": 0.016083,
     "end_time": "2024-06-09T18:34:00.868862",
     "exception": false,
     "start_time": "2024-06-09T18:34:00.852779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Engineering\n",
    "The importance of each feature is assessed to understand their impact on the prediction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "246402ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:34:00.904612Z",
     "iopub.status.busy": "2024-06-09T18:34:00.904188Z",
     "iopub.status.idle": "2024-06-09T18:34:00.960454Z",
     "shell.execute_reply": "2024-06-09T18:34:00.958567Z"
    },
    "papermill": {
     "duration": 0.076584,
     "end_time": "2024-06-09T18:34:00.963199",
     "exception": false,
     "start_time": "2024-06-09T18:34:00.886615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "importances = dict(zip(clf.feature_names_in_, clf.feature_importances_))\n",
    "sorted_importances = sorted(importances.items(), key = lambda x: x[1], reverse = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6be06ce6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:34:00.996075Z",
     "iopub.status.busy": "2024-06-09T18:34:00.995634Z",
     "iopub.status.idle": "2024-06-09T18:34:01.022229Z",
     "shell.execute_reply": "2024-06-09T18:34:01.020499Z"
    },
    "papermill": {
     "duration": 0.045727,
     "end_time": "2024-06-09T18:34:01.024798",
     "exception": false,
     "start_time": "2024-06-09T18:34:00.979071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('firstInhibitor', 0.3371854850430897),\n",
       " ('firstBaron', 0.09682643998703641),\n",
       " ('firstTower', 0.06925207702834686),\n",
       " ('firstDragon', 0.047058587648821606),\n",
       " ('firstRiftHerald', 0.022782890649496002),\n",
       " ('firstBlood', 0.014763803560009671),\n",
       " ('t2_Thresh', 0.0033788539227221893),\n",
       " ('t2_Tristana', 0.003321562881619228),\n",
       " ('t2_Vayne', 0.003112564352619498),\n",
       " ('t1_Tristana', 0.0030600498388916654),\n",
       " ('t1_Vayne', 0.0030532516191630723),\n",
       " ('t1_Kayn', 0.003004251286279004),\n",
       " ('t2_Kayn', 0.0029936605072420175),\n",
       " ('t1_Thresh', 0.0028194614781265285),\n",
       " ('t2_Lee Sin', 0.002740553045375567),\n",
       " ('t2_Twitch', 0.0026965773332263427),\n",
       " ('t1_Janna', 0.0026627625123632416),\n",
       " ('t2_Lucian', 0.002657124861288759),\n",
       " ('t2_Yasuo', 0.0026144903470068344),\n",
       " ('t1_Lee Sin', 0.002598103622765635),\n",
       " ('t2_Jhin', 0.00259071491992968),\n",
       " ('t1_Twitch', 0.002548888044869052),\n",
       " ('t2_Janna', 0.0025420992443181806),\n",
       " ('t2_Lux', 0.002532426884711056),\n",
       " ('t1_Jinx', 0.0025276786926469656),\n",
       " ('t2_Jinx', 0.0025222129356183894),\n",
       " ('t1_Jhin', 0.002515797442744358),\n",
       " ('t2_Xayah', 0.0024983869624285683),\n",
       " ('t1_Yasuo', 0.002483657850686144),\n",
       " ('t2_Blitzcrank', 0.0024782318161833193),\n",
       " ('t2_Caitlyn', 0.00238930933800198),\n",
       " ('t1_Lux', 0.002388426821781543),\n",
       " ('t2_Ahri', 0.0023774564481384777),\n",
       " ('t1_Lucian', 0.0023692670068314677),\n",
       " ('t1_Xayah', 0.0023577916141743842),\n",
       " ('t1_Zed', 0.0023211899155944505),\n",
       " ('t2_Zed', 0.002311970420408869),\n",
       " ('t2_Lulu', 0.0022935759181993767),\n",
       " ('t1_Orianna', 0.0022911800540142673),\n",
       " ('t2_Jax', 0.002285490742248207),\n",
       " ('t2_Master Yi', 0.002284928255044587),\n",
       " ('t2_Miss Fortune', 0.002255936536703756),\n",
       " ('t2_Gragas', 0.0022476821887838757),\n",
       " ('t1_Jax', 0.0022099485200481176),\n",
       " ('t2_Warwick', 0.0022046875085788044),\n",
       " ('t1_Master Yi', 0.002202683513222366),\n",
       " ('t2_Morgana', 0.002191176013472285),\n",
       " ('t2_Rakan', 0.0021864319310861326),\n",
       " ('t2_Orianna', 0.002171576478259898),\n",
       " ('t2_Jarvan IV', 0.0021664691632594254),\n",
       " ('t1_Lulu', 0.0021556245387918424),\n",
       " ('t1_Gragas', 0.002152082443120236),\n",
       " ('t2_Riven', 0.0021421508241288995),\n",
       " ('t1_Warwick', 0.002141670604548575),\n",
       " ('t1_Miss Fortune', 0.0021337590785099063),\n",
       " ('t2_Ornn', 0.0021082109537088178),\n",
       " ('t1_Ahri', 0.0021060526182625477),\n",
       " ('t2_Soraka', 0.0021034845151305195),\n",
       " ('t1_Caitlyn', 0.0020974062540023066),\n",
       " ('t1_Riven', 0.0020806908537794873),\n",
       " ('t1_Blitzcrank', 0.0020789528284481046),\n",
       " ('t1_Rakan', 0.00207617903622855),\n",
       " ('t1_Jarvan IV', 0.0020586822071488767),\n",
       " ('t1_Ornn', 0.002035614931644078),\n",
       " ('t1_Ashe', 0.00200003953225503),\n",
       " ('t2_Ekko', 0.001986196419335357),\n",
       " ('t1_Sona', 0.0019527611986750743),\n",
       " ('t1_Leona', 0.0019493222040429551),\n",
       " ('t2_Ashe', 0.0019350790753762206),\n",
       " ('t1_Soraka', 0.001930182808002502),\n",
       " ('t2_Nami', 0.0019255463695907096),\n",
       " ('t2_Ezreal', 0.0019107428684144337),\n",
       " ('t1_Morgana', 0.0019062229680557074),\n",
       " ('t2_Sona', 0.0018832149675747376),\n",
       " (\"t2_Cho'Gath\", 0.001841015295555945),\n",
       " ('t1_Ekko', 0.001826415382010341),\n",
       " ('t2_Leona', 0.0018248962561582367),\n",
       " ('t1_Ezreal', 0.0018245955325018712),\n",
       " ('t1_Nasus', 0.0018240146308583407),\n",
       " ('t1_Draven', 0.0018214975514547105),\n",
       " ('t2_Renekton', 0.0018167082630792695),\n",
       " ('t2_Draven', 0.0017813001421914674),\n",
       " ('t2_Teemo', 0.0017710588040462168),\n",
       " ('t2_Maokai', 0.0017697582333353046),\n",
       " ('t2_Gangplank', 0.0017474794621643575),\n",
       " ('t2_Sejuani', 0.001739201935604982),\n",
       " ('t1_Teemo', 0.001737240158260584),\n",
       " ('t1_Tryndamere', 0.001732575423442165),\n",
       " ('t2_Nasus', 0.0017296687304590788),\n",
       " (\"t1_Kha'Zix\", 0.0017160370843968694),\n",
       " ('t1_Maokai', 0.0017093440016992991),\n",
       " ('t1_Veigar', 0.001685007726597256),\n",
       " ('t2_Braum', 0.0016829975156622112),\n",
       " ('t1_Sivir', 0.0016816621339921102),\n",
       " ('t2_Garen', 0.0016707584936502212),\n",
       " ('t1_Garen', 0.001669511447845418),\n",
       " ('t2_Tryndamere', 0.0016599183424945636),\n",
       " (\"t1_Cho'Gath\", 0.001653896645470895),\n",
       " ('t1_Gangplank', 0.0016527349426387753),\n",
       " ('t2_Malzahar', 0.0016502912652311766),\n",
       " ('t2_Darius', 0.0016472926445368196),\n",
       " ('t1_Nami', 0.0016462312817766291),\n",
       " ('t1_Gnar', 0.001631716955257637),\n",
       " ('t1_Brand', 0.0016257208078372773),\n",
       " ('t2_Brand', 0.0016226567055615123),\n",
       " ('t1_Malzahar', 0.0016206875479865082),\n",
       " ('t1_Alistar', 0.0016167618312693632),\n",
       " ('t2_Syndra', 0.0016146208937969297),\n",
       " ('t2_Bard', 0.0015956793970142245),\n",
       " ('t1_Fizz', 0.0015928726291468947),\n",
       " (\"t2_Kha'Zix\", 0.0015919985953378752),\n",
       " ('t2_Twisted Fate', 0.001591578464204748),\n",
       " ('t1_Sejuani', 0.0015844662318931948),\n",
       " ('t1_Renekton', 0.0015787344424592717),\n",
       " ('t2_Kalista', 0.001544037889664231),\n",
       " ('t2_Veigar', 0.0015421504482259056),\n",
       " ('t2_Diana', 0.0015327235758020219),\n",
       " ('t2_Alistar', 0.001529096860718243),\n",
       " ('t2_Gnar', 0.0015269003421181106),\n",
       " ('t1_Twisted Fate', 0.0015215389611954863),\n",
       " ('t1_Darius', 0.0015215254547379523),\n",
       " ('t2_Talon', 0.001518519465554432),\n",
       " ('t1_Braum', 0.0015158215992231935),\n",
       " ('t1_Xin Zhao', 0.001513831117007419),\n",
       " ('t1_Pantheon', 0.0014870796582656777),\n",
       " ('t1_Katarina', 0.0014818402242503554),\n",
       " ('t2_Karma', 0.0014815451046314295),\n",
       " ('t2_Sivir', 0.001477174110839292),\n",
       " ('t2_Shen', 0.0014757607113042802),\n",
       " ('t2_Fizz', 0.0014699909730656036),\n",
       " ('t2_Xin Zhao', 0.0014623676343600092),\n",
       " (\"t2_Kog'Maw\", 0.0014616965184487604),\n",
       " ('t1_Annie', 0.0014580309492085958),\n",
       " ('t1_Syndra', 0.001455530920626269),\n",
       " ('t1_Vladimir', 0.0014544900765835283),\n",
       " (\"t2_Vel'Koz\", 0.0014544536056366106),\n",
       " ('t2_Jayce', 0.0014467194855274014),\n",
       " ('t1_Akali', 0.0014352589424760358),\n",
       " (\"t1_Vel'Koz\", 0.0014272239232518405),\n",
       " ('t1_Fiora', 0.0014262081958210523),\n",
       " ('t2_Katarina', 0.0014255977626332328),\n",
       " ('t1_Talon', 0.0014206516885288726),\n",
       " ('t1_Vi', 0.0014206068335099493),\n",
       " ('t1_Bard', 0.0014198264022257927),\n",
       " ('t2_Akali', 0.0014174232944277262),\n",
       " ('t1_Jayce', 0.0014173616396733937),\n",
       " (\"t1_Kog'Maw\", 0.0014078159527381349),\n",
       " ('t1_Shen', 0.0014009455309547637),\n",
       " ('t1_Cassiopeia', 0.0013995967999034292),\n",
       " ('t2_Vladimir', 0.0013722635593790696),\n",
       " ('t2_Zac', 0.0013653986605173586),\n",
       " ('t1_Galio', 0.0013618791395682657),\n",
       " ('t2_Kassadin', 0.0013532663343741006),\n",
       " ('t2_Annie', 0.0013531684205153754),\n",
       " ('t2_Shaco', 0.0013420781032804307),\n",
       " ('t1_Rammus', 0.0013402809738686816),\n",
       " ('t2_Pantheon', 0.001336051621454279),\n",
       " ('t2_Vi', 0.001332202128515692),\n",
       " ('t1_Kalista', 0.001324312088362815),\n",
       " ('t1_Diana', 0.0013211661383826208),\n",
       " ('t1_Varus', 0.0013146564432934369),\n",
       " ('t2_Shyvana', 0.0013110130263865208),\n",
       " ('t2_Varus', 0.0013017024019544034),\n",
       " ('t1_Corki', 0.0012979482990789317),\n",
       " ('t1_Shyvana', 0.0012938913721214718),\n",
       " ('t2_Rammus', 0.0012881765115072435),\n",
       " ('t2_Zyra', 0.001287470077685435),\n",
       " ('t1_Elise', 0.0012771401506900223),\n",
       " ('t2_Fiora', 0.0012630757203213915),\n",
       " ('t2_Corki', 0.0012619755909993057),\n",
       " ('t1_Urgot', 0.0012536388869426708),\n",
       " ('t1_Kassadin', 0.0012512061713576006),\n",
       " ('t1_Shaco', 0.0012473498877545851),\n",
       " ('t2_Galio', 0.0012466663624996518),\n",
       " ('t2_Cassiopeia', 0.0012397808626136491),\n",
       " ('t1_Zac', 0.0012335154249797074),\n",
       " ('t1_Karma', 0.001223694994545623),\n",
       " ('t1_Taric', 0.001218924581358442),\n",
       " ('t2_Elise', 0.001214331691262991),\n",
       " ('t1_Irelia', 0.0012110168426816123),\n",
       " ('t1_Ziggs', 0.001206163266597548),\n",
       " ('t2_Trundle', 0.001197072227264652),\n",
       " ('t2_Amumu', 0.0011912258959380939),\n",
       " ('t2_Taric', 0.001186854390636239),\n",
       " ('t2_Urgot', 0.001186708841094712),\n",
       " ('t2_Anivia', 0.0011863956228910786),\n",
       " ('t1_Zyra', 0.001178524653610386),\n",
       " ('t1_Rengar', 0.0011775196389298556),\n",
       " ('t2_Wukong', 0.001169653295978379),\n",
       " ('t1_Malphite', 0.0011668819663255023),\n",
       " ('t2_Sion', 0.001135682904098997),\n",
       " ('t2_Ziggs', 0.0011215860862981224),\n",
       " ('t1_Fiddlesticks', 0.0011129428772572187),\n",
       " ('t1_Wukong', 0.001112605923668766),\n",
       " ('t2_Rengar', 0.0011084220948092804),\n",
       " ('t2_Malphite', 0.0011076993469486913),\n",
       " ('t2_Nautilus', 0.001091716470094906),\n",
       " ('t1_Sion', 0.0010900299638109756),\n",
       " ('t1_Poppy', 0.0010880296681703983),\n",
       " ('t1_Nautilus', 0.0010851417884868994),\n",
       " ('t2_Irelia', 0.0010801577455680973),\n",
       " ('t1_LeBlanc', 0.0010791398193895861),\n",
       " ('t1_Kled', 0.0010691609857172617),\n",
       " ('t1_Amumu', 0.0010660475113703017),\n",
       " ('t1_Kennen', 0.0010580422166440288),\n",
       " ('t2_LeBlanc', 0.0010501093567165266),\n",
       " ('t1_Camille', 0.0010354435393814352),\n",
       " ('t2_Nocturne', 0.001032131959307031),\n",
       " ('t2_Taliyah', 0.0010303617594626718),\n",
       " ('t1_Trundle', 0.0010274816977544207),\n",
       " ('t2_Poppy', 0.0010236014221319705),\n",
       " ('t2_Camille', 0.0010190870714636643),\n",
       " ('t1_Anivia', 0.0010142134384409232),\n",
       " ('t1_Taliyah', 0.0010090794433980292),\n",
       " ('t1_Viktor', 0.0010008161517997471),\n",
       " ('t2_Heimerdinger', 0.0010004140292160608),\n",
       " ('t1_Heimerdinger', 0.0009940448843631445),\n",
       " ('t1_Hecarim', 0.0009887298372904315),\n",
       " ('t2_Hecarim', 0.0009836069013000614),\n",
       " ('t2_Kled', 0.000970734677448252),\n",
       " ('t1_Kayle', 0.0009681141248562474),\n",
       " ('t2_Tahm Kench', 0.0009672227320811004),\n",
       " ('t1_Tahm Kench', 0.0009573825071153557),\n",
       " ('t1_Nidalee', 0.0009572353803799405),\n",
       " ('t2_Dr. Mundo', 0.0009567886176717373),\n",
       " ('t2_Viktor', 0.0009524575676352036),\n",
       " ('t2_Kennen', 0.0009501879034192425),\n",
       " ('t1_Dr. Mundo', 0.0009463164388862007),\n",
       " ('t2_Kayle', 0.0009304600361608511),\n",
       " ('t1_Swain', 0.0009137426680661014),\n",
       " ('t1_Graves', 0.0009081202649071888),\n",
       " ('t1_Olaf', 0.0008982500157877885),\n",
       " ('t1_Xerath', 0.0008954324167986651),\n",
       " ('t2_Evelynn', 0.0008949940968448276),\n",
       " ('t2_Rumble', 0.0008941573990238439),\n",
       " ('t2_Fiddlesticks', 0.0008860954438891491),\n",
       " ('t1_Yorick', 0.0008839306216424598),\n",
       " (\"t1_Rek'Sai\", 0.0008804310340093583),\n",
       " ('t2_Graves', 0.0008776145755013089),\n",
       " ('t2_Olaf', 0.000861919055015321),\n",
       " ('t1_Ivern', 0.0008615152913735971),\n",
       " ('t1_Udyr', 0.0008565134751282228),\n",
       " ('t2_Singed', 0.0008491431155945594),\n",
       " ('t2_Xerath', 0.0008480464305900086),\n",
       " ('t1_Singed', 0.0008466233804873918),\n",
       " ('t2_Zilean', 0.0008404697071368301),\n",
       " ('t1_Illaoi', 0.0008276817059638297),\n",
       " ('t1_Nocturne', 0.0008265806588486864),\n",
       " ('t1_Evelynn', 0.0008203762665874169),\n",
       " ('t2_Mordekaiser', 0.0008190190852842025),\n",
       " ('t2_Yorick', 0.0008129181865459752),\n",
       " ('t1_Azir', 0.0008121678252476074),\n",
       " ('t1_Zilean', 0.0008106881910785398),\n",
       " ('t2_Ryze', 0.000808075529867952),\n",
       " ('t1_Ryze', 0.0008066634367442488),\n",
       " ('t2_Swain', 0.0008032915461055148),\n",
       " ('t2_Nunu', 0.0007926795645112136),\n",
       " (\"t2_Rek'Sai\", 0.0007822356394443627),\n",
       " ('t2_Illaoi', 0.0007816545942220384),\n",
       " ('t2_Quinn', 0.0007765561745707592),\n",
       " ('t2_Volibear', 0.0007705859382299849),\n",
       " ('t1_Rumble', 0.0007614953581667343),\n",
       " ('t1_Lissandra', 0.0007610818219464396),\n",
       " ('t1_Mordekaiser', 0.0007452606188249522),\n",
       " ('t2_Nidalee', 0.0007443721137412842),\n",
       " ('t1_Aurelion Sol', 0.0007264418686223988),\n",
       " ('t2_Udyr', 0.0007221163784005404),\n",
       " ('t2_Azir', 0.0007138197048072975),\n",
       " ('t1_Quinn', 0.000701372593760798),\n",
       " ('t1_Kindred', 0.00069353582227242),\n",
       " ('t2_Kindred', 0.0006916348419355524),\n",
       " ('t2_Ivern', 0.0006762945635480187),\n",
       " ('t2_Lissandra', 0.0006725705232314813),\n",
       " ('t2_Aurelion Sol', 0.0006592966129284264),\n",
       " ('t1_Nunu', 0.0006582325579124704),\n",
       " ('t1_Volibear', 0.0006388739932780865),\n",
       " ('t2_Karthus', 0.0006071364896774999),\n",
       " ('t1_Aatrox', 0.0005817778451419949),\n",
       " ('t1_Karthus', 0.0005568253802252507),\n",
       " ('t2_Aatrox', 0.0005045143969133483),\n",
       " ('t2_Skarner', 0.0004429444685155561),\n",
       " ('t1_Skarner', 0.00042191827529405006)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_importances"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "879c3707",
   "metadata": {
    "papermill": {
     "duration": 0.015187,
     "end_time": "2024-06-09T18:34:01.055851",
     "exception": false,
     "start_time": "2024-06-09T18:34:01.040664",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Champion Win Rate Analysis\n",
    "Finally, I checked the win rate of my favorite champions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "66c6f8d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:34:01.089575Z",
     "iopub.status.busy": "2024-06-09T18:34:01.089158Z",
     "iopub.status.idle": "2024-06-09T18:34:01.113493Z",
     "shell.execute_reply": "2024-06-09T18:34:01.112248Z"
    },
    "papermill": {
     "duration": 0.044501,
     "end_time": "2024-06-09T18:34:01.116211",
     "exception": false,
     "start_time": "2024-06-09T18:34:01.071710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.49864314789687925\n"
     ]
    }
   ],
   "source": [
    "champ_name = 'Akali'\n",
    "\n",
    "wins1 = len(df[(df[f't1_{champ_name}'] == 1) & (df['winner'] == 1)])\n",
    "wins2 = len(df[(df[f't2_{champ_name}'] == 1) & (df['winner'] == 2)])\n",
    "losses1 = len(df[(df[f't1_{champ_name}'] == 1) & (df['winner'] == 2)])\n",
    "losses2 = len(df[(df[f't2_{champ_name}'] == 1) & (df['winner'] == 1)])\n",
    "\n",
    "print((wins1 + wins2) / (wins1 + wins2 + losses1 + losses2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edabdbbe",
   "metadata": {
    "papermill": {
     "duration": 0.015676,
     "end_time": "2024-06-09T18:34:01.147774",
     "exception": false,
     "start_time": "2024-06-09T18:34:01.132098",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "49% win rate for **Akali**. Not amazing but acceptable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2a3c006f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:34:01.183142Z",
     "iopub.status.busy": "2024-06-09T18:34:01.182689Z",
     "iopub.status.idle": "2024-06-09T18:34:01.206360Z",
     "shell.execute_reply": "2024-06-09T18:34:01.204520Z"
    },
    "papermill": {
     "duration": 0.044485,
     "end_time": "2024-06-09T18:34:01.209034",
     "exception": false,
     "start_time": "2024-06-09T18:34:01.164549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.475653742110009\n"
     ]
    }
   ],
   "source": [
    "champ_name = 'LeBlanc'\n",
    "\n",
    "wins1 = len(df[(df[f't1_{champ_name}'] == 1) & (df['winner'] == 1)])\n",
    "wins2 = len(df[(df[f't2_{champ_name}'] == 1) & (df['winner'] == 2)])\n",
    "losses1 = len(df[(df[f't1_{champ_name}'] == 1) & (df['winner'] == 2)])\n",
    "losses2 = len(df[(df[f't2_{champ_name}'] == 1) & (df['winner'] == 1)])\n",
    "\n",
    "print((wins1 + wins2) / (wins1 + wins2 + losses1 + losses2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e3640e8",
   "metadata": {
    "papermill": {
     "duration": 0.015677,
     "end_time": "2024-06-09T18:34:01.241229",
     "exception": false,
     "start_time": "2024-06-09T18:34:01.225552",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "47% win rate for **LeBlanc**. No surprise there. About time we got a new buff."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "665ec64a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-09T18:34:01.277724Z",
     "iopub.status.busy": "2024-06-09T18:34:01.277293Z",
     "iopub.status.idle": "2024-06-09T18:34:01.316110Z",
     "shell.execute_reply": "2024-06-09T18:34:01.314754Z"
    },
    "papermill": {
     "duration": 0.06153,
     "end_time": "2024-06-09T18:34:01.319243",
     "exception": false,
     "start_time": "2024-06-09T18:34:01.257713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.46598639455782315\n"
     ]
    }
   ],
   "source": [
    "champ_name = 'Ezreal'\n",
    "\n",
    "wins1 = len(df[(df[f't1_{champ_name}'] == 1) & (df['winner'] == 1)])\n",
    "wins2 = len(df[(df[f't2_{champ_name}'] == 1) & (df['winner'] == 2)])\n",
    "losses1 = len(df[(df[f't1_{champ_name}'] == 1) & (df['winner'] == 2)])\n",
    "losses2 = len(df[(df[f't2_{champ_name}'] == 1) & (df['winner'] == 1)])\n",
    "\n",
    "print((wins1 + wins2) / (wins1 + wins2 + losses1 + losses2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b2fdb82",
   "metadata": {
    "papermill": {
     "duration": 0.023778,
     "end_time": "2024-06-09T18:34:01.368001",
     "exception": false,
     "start_time": "2024-06-09T18:34:01.344223",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Ezreal's** win rate 46% which is even less than **Leblanc's**. All of my mains have below 50% win rate. No wonder I'm not climbing this season. Might need a new champion pool."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2361,
     "sourceId": 4394,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18.025556,
   "end_time": "2024-06-09T18:34:02.214864",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-09T18:33:44.189308",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
